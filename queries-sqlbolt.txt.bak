


Exercise 2 — Tasks

Find the movie with a row id of 6

SELECT * FROM movies
where id=6 ;

Find the movies released in the years between 2000 and 2010

SELECT * FROM movies
WHERE year BETWEEN 2000 AND 2010;

Find the movies not released in the years between 2000 and 2010

SELECT * FROM movies
WHERE year NOT BETWEEN 2000 AND 2010;

Find the first 5 Pixar movies and their release year

SELECT title, year FROM movies
WHERE year <= 2003;

Exercise 3 — Tasks

Find all the Toy Story movies

SELECT * FROM movies
WHERE title LIKE "Toy Story%" ;

Find all the movies directed by John Lasseter

SELECT * FROM movies
WHERE director LIKE "John Lasseter" ;

Find all the movies (and director) not directed by John Lasseter

SELECT title,director FROM movies
WHERE director NOT LIKE "John Lasseter" ;

Find all the WALL-* movies

SELECT * FROM movies
WHERE title LIKE "WALL-%";

Exercise 4 — Tasks

List all directors of Pixar movies (alphabetically), without duplicates 

SELECT DISTINCT director FROM movies
ORDER BY director ASC;

List the last four Pixar movies released (ordered from most recent to least)

SELECT DISTINCT * FROM movies
ORDER BY year DESC
LIMIT 4

List the first five Pixar movies sorted alphabetically

SELECT DISTINCT * FROM movies
ORDER BY title ASC
LIMIT 5

List the next five Pixar movies sorted alphabetically

SELECT DISTINCT * FROM movies
ORDER BY title ASC
LIMIT 5 OFFSET 5

Review 1 — Tasks

List all the Canadian cities and their populations 

SELECT * FROM north_american_cities
WHERE Country="Canada";

Order all the cities in the United States by their latitude from north to south

SELECT * FROM north_american_cities
WHERE Country="United States"
ORDER BY Latitude DESC;

List all the cities west of Chicago, ordered from west to east

SELECT city, longitude FROM north_american_cities
WHERE longitude < -87.629798
ORDER BY longitude ASC;

List the two largest cities in Mexico (by population)

SELECT * FROM north_american_cities
WHERE Country="Mexico"
ORDER BY population DESC
LIMIT 2

List the third and fourth largest cities (by population) in the United States and their population

SELECT * FROM north_american_cities
WHERE Country="United States"
ORDER BY population DESC
LIMIT 2 OFFSET 2

Exercise 6 — Tasks

Find the domestic and international sales for each movie 

SELECT * FROM Boxoffice
INNER JOIN Movies
ON Movies.Id = Boxoffice.movie_id;

Show the sales numbers for each movie that did better internationally rather than domestically

SELECT * FROM Boxoffice
INNER JOIN Movies
ON Movies.Id = Boxoffice.movie_id
WHERE International_sales > Domestic_sales;

List all the movies by their ratings in descending order

SELECT * FROM Boxoffice
INNER JOIN Movies
ON Movies.Id = Boxoffice.movie_id
ORDER BY Rating DESC

Exercise 7 — Tasks

Find the list of all buildings that have employees

SELECT DISTINCT building FROM employees;

Find the list of all buildings and their capacity

SELECT * FROM Buildings;

List all buildings and the distinct employee roles in each building (including empty buildings)

SELECT DISTINCT Role , Building_name FROM Buildings
LEFT JOIN Employees
ON Buildings.Building_name = Employees.Building;

Find the name and role of all employees who have not been assigned to a building ✓

SELECT * FROM employees
WHERE years_employed = 0 ;

Find the names of the buildings that hold no employees

SELECT Building_name FROM buildings
LEFT JOIN Employees
ON Employees.building = Buildings.building_name
WHERE Name IS NULL

List all movies and their combined sales in millions of dollars 

SELECT * FROM movies
INNER JOIN Boxoffice
ON Movies.id = Boxoffice.Movie_id
WHERE Domestic_sales + International_sales > 10000000;

List all movies and their ratings in percent

SELECT title, rating * 10 AS rating_percent
FROM movies
  JOIN boxoffice
    ON movies.id = boxoffice.movie_id;
	
List all movies that were released on even number years

SELECT title, year 
FROM movies
  JOIN boxoffice
    ON movies.id = boxoffice.movie_id
    WHERE year%2==0;
	
Find the longest time that an employee has been at the studio 

SELECT MAX(years_employed) FROM employees;

For each role, find the average number of years employed by employees in that role

SELECT role , AVG(Years_employed) FROM employees
GROUP BY Role

Find the total number of employee years worked in each building

SELECT building,SUM(Years_employed) FROM employees
GROUP BY building

Exercise 11 — Tasks

Find the number of Artists in the studio (without a HAVING clause)

SELECT COUNT() AS count_of_Artist FROM employees
WHERE Role LIKE "Artist";

Find the number of Employees of each role in the studio

SELECT Role,COUNT(Name) FROM employees
GROUP BY ROLE;

Find the total number of years employed by all Engineers

SELECT SUM(years_employed) FROM employees
WHERE Role LIKE "Engineer"

Find the number of movies each director has directed 

SELECT Director,COUNT(Title) FROM movies
GROUP BY Director ;

Find the total domestic and international sales that can be attributed to each director

SELECT Director,SUM(Domestic_sales+International_sales) FROM movies
JOIN Boxoffice 
ON Boxoffice.Movie_id = Movies.Id
GROUP BY Director

Exercise 12 — Tasks

Find the number of movies each director has directed

SELECT Director,COUNT(Title) FROM movies 
GROUP BY Director

Find the total domestic and international sales that can be attributed to each director

SELECT Director,SUM(Domestic_sales+International_sales) FROM movies 
JOIN Boxoffice
ON Boxoffice.Movie_id = Movies.Id
GROUP BY Director

Exercise 13 — Tasks

Add the studio's new production, Toy Story 4 to the list of movies (you can use any director)

INSERT INTO Movies
(Title,Director,Year,Length_minutes)
VALUES ("Toy Story 4","John Lasseter",2014,168)

Toy Story 4 has been released to critical acclaim! It had a rating of 8.7, 
and made 340 million domestically and 270 million internationally. Add the record to the BoxOffice table.

INSERT INTO Boxoffice
(Movie_id,Rating,Domestic_sales,International_sales)
VALUES (15,8.7,340000000,270000000)

Exercise 14 — Tasks

The director for A Bug's Life is incorrect, it was actually directed by John Lasseter ✓

UPDATE Movies 
SET Director = "John Lasseter"
WHERE Title = "A Bug's Life"

The year that Toy Story 2 was released is incorrect, it was actually released in 1999

UPDATE Movies
SET Year = 1999
WHERE Title = "Toy Story 2"

Both the title and director for Toy Story 8 is incorrect! The title should be "Toy Story 3" and it was directed by Lee Unkrich

UPDATE Movies
SET Director = "Lee Unkrich" ,
    Title = "Toy Story 3"
WHERE Title = "Toy Story 8"

Exercise 15 — Tasks

This database is getting too big, lets remove all movies that were released before 2005.

DELETE FROM Movies
WHERE Year < 2005

Andrew Stanton has also left the studio, so please remove all movies directed by him.

DELETE FROM Movies
WHERE Director LIKE "Andrew Stanton"

Exercise 16 — Tasks
Create a new table named Database with the following columns:
– Name A string (text) describing the name of the database
– Version A number (floating point) of the latest version of this database
– Download_count An integer count of the number of times this database was downloaded
This table has no constraints. 

CREATE TABLE IF NOT EXISTS Database (
    Name TEXT,
    Version INTEGER,
    Download_count INTEGER
)

Exercise 17 — Tasks

Add a column named Aspect_ratio with a FLOAT data type to store the aspect-ratio each movie was released in.

ALTER TABLE Movies
ADD Aspect_ratio FLOAT;

Add another column named Language with a TEXT data type to store the language that the movie was released in.
Ensure that the default for this language is English.

ALTER TABLE Movies 
ADD Language TEXT 
DEFAULT "English"
